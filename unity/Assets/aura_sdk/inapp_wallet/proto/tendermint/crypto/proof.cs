// This file was generated by a tool; you should avoid making direct changes.
// Consider using 'partial classes' to extend these types
// Input: proof.proto

#pragma warning disable CS0612, CS1591, CS3021, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
namespace tendermint.crypto
{

    [global::ProtoBuf.ProtoContract()]
    public partial class Proof : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"total")]
        public long Total { get; set; }

        [global::ProtoBuf.ProtoMember(2, Name = @"index")]
        public long Index { get; set; }

        [global::ProtoBuf.ProtoMember(3, Name = @"leaf_hash")]
        public byte[] LeafHash { get; set; }

        [global::ProtoBuf.ProtoMember(4, Name = @"aunts")]
        public global::System.Collections.Generic.List<byte[]> Aunts { get; } = new global::System.Collections.Generic.List<byte[]>();

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class ValueOp : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"key")]
        public byte[] Key { get; set; }

        [global::ProtoBuf.ProtoMember(2, Name = @"proof")]
        public Proof Proof { get; set; }

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class DominoOp : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"key")]
        [global::System.ComponentModel.DefaultValue("")]
        public string Key { get; set; } = "";

        [global::ProtoBuf.ProtoMember(2, Name = @"input")]
        [global::System.ComponentModel.DefaultValue("")]
        public string Input { get; set; } = "";

        [global::ProtoBuf.ProtoMember(3, Name = @"output")]
        [global::System.ComponentModel.DefaultValue("")]
        public string Output { get; set; } = "";

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class ProofOp : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"type")]
        [global::System.ComponentModel.DefaultValue("")]
        public string Type { get; set; } = "";

        [global::ProtoBuf.ProtoMember(2, Name = @"key")]
        public byte[] Key { get; set; }

        [global::ProtoBuf.ProtoMember(3, Name = @"data")]
        public byte[] Data { get; set; }

    }

    [global::ProtoBuf.ProtoContract()]
    public partial class ProofOps : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"ops")]
        public global::System.Collections.Generic.List<ProofOp> Ops { get; } = new global::System.Collections.Generic.List<ProofOp>();

    }

}

#pragma warning restore CS0612, CS1591, CS3021, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
