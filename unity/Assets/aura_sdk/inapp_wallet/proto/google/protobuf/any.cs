using System.IO;
// This file was generated by a tool; you should avoid making direct changes.
// Consider using 'partial classes' to extend these types
// Input: any.proto

#pragma warning disable CS0612, CS1591, CS3021, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
namespace Google.Protobuf.WellKnownTypes
{

    [global::ProtoBuf.ProtoContract()]
    public partial class Any : global::ProtoBuf.IExtensible
    {
        private global::ProtoBuf.IExtension __pbn__extensionData;
        global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
            => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

        [global::ProtoBuf.ProtoMember(1, Name = @"type_url")]
        [global::System.ComponentModel.DefaultValue("")]
        public string TypeUrl { get; set; } = "";

        [global::ProtoBuf.ProtoMember(2, Name = @"value")]
        public byte[] Value { get; set; }
        /// <summary>Pack <paramref name="value"/></summary>
        public static Any Pack(object value)
        {
            // Handle null
            if (value == null) return new Any { TypeUrl = null, Value = null };
            // Get type
            System.Type type = value.GetType();
            // Write here
            MemoryStream ms = new MemoryStream();
            // Serialize
            ProtoBuf.Serializer.Serialize(ms, value);
            // Create any
            Any any = new Any
            {
                TypeUrl = $"{type.Assembly.GetName().Name}/{type.FullName}",
                Value = ms.ToArray()
            };
            // Return
            return any;
        }
        /// <summary>Pack <paramref name="value"/></summary>
        public static Any Pack(object value, string typeURL = null)
        {
            // Handle null
            if (value == null) return new Any { TypeUrl = null, Value = null };
            if (typeURL == null){
                // Get type
                System.Type type = value.GetType();
                typeURL = (type.Assembly.GetName().Name) + "/" + type.FullName;
            }
            // Write here
            MemoryStream ms = new MemoryStream();
            // Serialize
            ProtoBuf.Serializer.Serialize(ms, value);
            // Create any
            Any any = new Any
            {
                TypeUrl = typeURL,
                Value = ms.ToArray()
            };
            // Return
            return any;
        }
        /// <summary>Pack <paramref name="value"/></summary>
        public static Any Pack<T>(T value, string typeURL = null)
        {
            // Handle null
            if (value == null) return new Any { TypeUrl = null, Value = null };
            if (typeURL == null){
                // Get type
                System.Type type = value.GetType();
                typeURL = (type.Assembly.GetName().Name) + "/" + type.FullName;
            }
            // Write here
            MemoryStream ms = new MemoryStream();
            // Serialize
            ProtoBuf.Serializer.Serialize<T>(ms, value);
            // Create any
            Any any = new Any
            {
                TypeUrl = typeURL,
                Value = ms.ToArray()
            };
            // Return
            return any;
        }
    }
}

#pragma warning restore CS0612, CS1591, CS3021, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
